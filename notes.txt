{% load static %}
{% load static tailwind_tags %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>{% block title %}Subpost{% endblock %}</title>

</head>

{% tailwind_css %}
<body>
    <header>

    </header>
    <main>
{% block content %}
<nav>
    <ul>
        <li><a href="{% url 'home' %}">Home</a></li>
        <li><a href="{% url 'about' %}">About</a></li>
        . Additional navigation items here .
        {% if user.is_authenticated %}
            <li><a href="{% url 'logout' %}">Logout</a></li>
        {% else %}
            <li><a href="{% url 'login' %}">Login</a></li>
            <li><a href="{% url 'signup' %}">Sign Up</a></li>
        {% endif %}
    </ul>
</nav>

{% endblock %}
    </main>
    <footer>

    </footer>
</body>
</html> 







DELETE.HTML

<!-- <% extends 'base.html' %>

<!-- <% block content %> -->
    <h1>Delete Post</h1>
    <p>Are you sure you want to delete "{{ post.title }}"?</p>
    <form method="post" action="<% url 'delete_post' post.id %>">
        <!-- <% csrf_token %> -->
        <button type="submit">Delete</button>
    </form>
<!-- <% endblock %> -->







create_post



<!-- {% extends 'base.html' %}

{% block content %}
    <h1>Create a New Post</h1>
    <form method="post" action="{% url 'create_post' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Submit</button>
    </form>
{% endblock %} -->



 
 <!-- {% extends 'base.html' %}

 {% block content %}
<div class="container mx-auto p-4">
    <form action="" method="post" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="mb-4">
            <input type="text" name="title" placeholder="Title" class="shadow border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        </div>
        <div class="mb-4">
            <textarea name="content" rows="4" placeholder="Content" class="shadow border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
        </div>
        <div class="mb-4">
            <input type="file" name="image" class="block">
        </div>
        <div class="mb-4">
            <input type="file" name="video" class="block">
        </div>
        <div class="mb-4">
            <input type="url" name="link" placeholder="Link" class="shadow border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        </div>
        <button type="submit" class="bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Post</button>
    </form>
</div>
{% endblock %}  -->











BASE.HTML CODE 


{% load static %}
{% load static tailwind_tags %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- <link rel="stylesheet" type="text/css" href="{% static 'subpost/theme/css/dist/styles.css' %}"> -->
 <title>{% block title %}Subpost{% endblock title %}</title>
    {% tailwind_css %}

    <script type="text/javascript">
        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
        const csrftoken = getCookie('csrftoken');
    </script>


</head>

<body>
    <header>
        <nav class="bg-blue-600 text-white">
            <div class="max-w-7xl mx-auto px-2 sm:px-6 lg:px-8">
                <div class="relative flex items-center justify-between h-16">
                    <div class="flex-1 flex items-center justify-center sm:items-stretch sm:justify-start">
                        <div class="flex-shrink-0 flex items-center">
                            <!-- Your logo here if you have one -->
                            <img src="{% static 'SubPost.png' %}" alt="SubPost Logo">


                        </div>
                        <div class="hidden sm:block sm:ml-6">
                            <div class="flex space-x-4">
                                <a href="{% url 'home' %}" class="px-3 py-2 rounded-md text-sm font-medium hover:bg-gray-700">Home</a>
                                {% if user.is_authenticated %}
                                    <a href="{% url 'logout' %}" class="px-3 py-2 rounded-md text-sm font-medium hover:bg-gray-700">Logout</a>
                                {% else %}
                                    <a href="{% url 'login' %}" class="px-3 py-2 rounded-md text-sm font-medium hover:bg-gray-700">Login</a>
                                    <a href="{% url 'signup' %}" class="px-3 py-2 rounded-md text-sm font-medium hover:bg-gray-700">Sign Up</a>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <main>
        {% block content %} 
        <!-- Your main content goes here -->
        {% endblock content %}
    </main>
    <footer>
        <!-- Your footer content -->
    </footer>
</body>
</html>







Home.HTML


  <!-- <h1>Subpost!</h1> -->
<!-- 
   <a href="{% url 'signup' %}">Sign Up</a> 
   {% if not user.is_authenticated %}
     Sign Up Button -->
    <!-- <a href="{% url 'signup' %}" class="btn">Sign Up</a> -->
<!-- {% endif %}  -->

   <!-- <a href="{% url 'login' %}">Login</a> -->
    <!-- {% if not user.is_authenticated %}  -->
    <!-- Login Button -->
   <!-- <a href="{% url 'login' %}">Login</a> -->
<!-- {% endif %} -->

    <!-- <a href="{% url 'logout' %}">Logout</a> 
   {% if user.is_authenticated %}  -->
   <!-- Logout Button/Form  -->
   <!-- <form action="{% url 'logout' %}" method="post">
       {% csrf_token %}
       <input type="submit" value="Logout">
   </form>
{% endif %} -->

<!-- <a href="{% url 'create_post' %}"><button>Create a Post</button></a>
{% for post in posts %}
   <div>
       <h2>{{ post.title }}</h2>
       <p>{{ post.content }}</p>
      
   </div> -->





<!-- {% extends 'base.html' %}

{% block content %}


   <a href="{% url 'create_post' %}" class="inline-block">
    <button class="bg-orange-500 text-white font-semibold py-2 px-4 border border-orange-700 rounded shadow">
        Create a Post
    </button>
</a>
{% for post in posts %}
<div class="border border-gray-300 p-4 mt-4 rounded">
    <h2 class="text-xl font-semibold text-gray-800">{{ post.title }}</h2>
    <p class="text-gray-600">{{ post.content }}</p>
</div>
{% endfor %}






{% endfor %}
{% endblock %} -->





updating post_detail again



<!-- In your post_detail.html -->
{% extends 'base.html' %}

{% block content %}
<div class="post-detail">
    <h1>{{ post.title }}</h1>
    <p>{{ post.content }}</p>
    
    <!-- Upvote and Downvote Buttons -->
    <a href="{% url 'upvote_post' post.pk %}">Upvote</a>
    <span>{{ post.upvotes }}</span>
    <a href="{% url 'downvote_post' post.pk %}">Downvote</a>
    <span>{{ post.downvotes }}</span>

    <!-- Edit and Delete Links (only show if the user is the author) -->
    {% if user == post.author %}
        <a href="{% url 'edit_post' post.pk %}">Edit</a>
        <a href="{% url 'delete_post' post.pk %}">Delete</a>
    {% endif %}

    <!-- Comments Section -->
    <div class="comments">
        <h2>Comments</h2>
        {% for comment in comments %}
            <div class="comment">
                <p>{{ comment.text }}</p>
                <!-- Comment Voting -->
                <a href="{% url 'upvote_comment' post.pk comment.pk %}">Upvote</a>
                <span>{{ comment.upvotes }}</span>
                <a href="{% url 'downvote_comment' post.pk comment.pk %}">Downvote</a>
                <span>{{ comment.downvotes }}</span>
            </div>
        {% endfor %}
    </div>

    <!-- Comment Form -->
    <div class="comment-form">
        <form method="post">
            {% csrf_token %}
            {{ comment_form.as_p }}
            <button type="submit">Post Comment</button>
        </form>
    </div>
</div>
{% endblock %}



















<!-- {% extends 'base.html' %}

{% block content %}
<div class="post-detail">
    <h1>{{ post.title }}</h1>
    <p>{{ post.content }}</p> -->
    
    <!-- Upvote and Downvote Buttons for the Post -->
    <!-- <button onclick="upvotePost({{ post.pk }})" class="text-green-500">
        <i class="fas fa-arrow-up"></i>
    </button>
    <span id="post-upvotes-{{ post.pk }}">{{ post.upvotes }}</span>
    <button onclick="downvotePost({{ post.pk }})" class="text-red-500">
        <i class="fas fa-arrow-down"></i>
    </button>
    <span id="post-downvotes-{{ post.pk }}">{{ post.downvotes }}</span> -->

    <!-- Edit and Delete Links (only show if the user is the author) -->
    <!-- {% if user == post.author %}
        <a href="{% url 'edit_post' post.pk %}">Edit</a>
        <a href="{% url 'delete_post' post.pk %}">Delete</a>
    {% endif %} -->

    <!-- Comments Section
     <div class="comments">
        <h2>Comments</h2>
        {% for comment in comments %}
            <div class="comment">
                <p>{{ comment.text }}</p> -->
                <!-- Comment Voting -->
                <!-- <button onclick="upvoteComment({{ comment.pk }})" class="text-green-500">
                    <i class="fas fa-arrow-up"></i>
                </button>
                <span id="comment-upvotes-{{ comment.pk }}">{{ comment.upvotes }}</span>
                <button onclick="downvoteComment({{ comment.pk }})" class="text-red-500">
                    <i class="fas fa-arrow-down"></i>
                </button>
                <span id="comment-downvotes-{{ comment.pk }}">{{ comment.downvotes }}</span>
            </div>
         
        {% endfor %}
    </div>  -->

    <!-- Comment Form -->
    <!-- <div class="comment-form"> -->
        <!-- <form method="post" action="{% url 'post_detail' pk=post.pk %}"> -->
            <!-- <form method="post" action=""> -->
        <!-- <form method="post"> -->
            <!-- {% csrf_token %}
            {{ comment_form.as_p }}
            <button type="submit">Post Comment</button>
        </form>
    </div> -->
    <!-- <div class="comment-form">
        <form method="post" action="">
            {% csrf_token %}
            {{ comment_form.as_p }}
            <textarea name="content" rows="4" placeholder="Content" class="shadow border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
            <button type="submit">Post Comment</button>
        </form>
    </div>
    
    
</div>
<!-- Insert photo markup below this comment  -->
<!-- {% for photo in post.photo_set.all %}
<img class="responsive-img card-panel" src="{{photo.url}}">
{% empty %}
<div class="card-panel teal-text center-align">No Photos Uploaded</div>
{% endfor %}
<form action="{% url 'add_photo' post.id %}" enctype="multipart/form-data" method="POST" class="card-panel">
    {% csrf_token %}
    <input type="file" name="photo-file">
    <br><br>
    <button type="submit" class="btn">Upload Photo</button>
</form>  -->




<!-- {% endblock %} 


<script>
    function upvoteComment(commentId) {
        $.ajax({
            type: 'POST',
            url: '/upvote-comment/' + commentId + '/',
            data: {
                csrfmiddlewaretoken: csrftoken,  // Ensure CSRF token is available
            },
            success: function(response) {
                $('#comment-upvotes-' + commentId).text(response.upvotes);
            },
            error: function(xhr, status, error) {
                console.log('Error in upvoting comment: ', error);
            }
        });
    }

    function downvoteComment(commentId) {
        $.ajax({
            type: 'POST',
            url: '/downvote-comment/' + commentId + '/',
            data: {
                csrfmiddlewaretoken: csrftoken,  // Ensure CSRF token is available
            },
            success: function(response) {
                $('#comment-downvotes-' + commentId).text(response.downvotes);
            },
            error: function(xhr, status, error) {
                console.log('Error in downvoting comment: ', error);
            }
        });
    }
</script> -->




















{% extends 'base.html' %}

{% block content %}
<div class="post-detail">
    <h1>{{ post.title }}</h1>
    <p>{{ post.content }}</p>
    
    <!-- Upvote and Downvote Buttons for the Post -->
    <button onclick="upvotePost({{ post.pk }})" class="text-green-500">
        <i class="fas fa-arrow-up"></i>
    </button>
    <span id="post-upvotes-{{ post.pk }}">{{ post.upvotes }}</span>
    <button onclick="downvotePost({{ post.pk }})" class="text-red-500">
        <i class="fas fa-arrow-down"></i>
    </button>
    <span id="post-downvotes-{{ post.pk }}">{{ post.downvotes }}</span> 

    <!-- Edit and Delete Links (only show if the user is the author) -->
    {% if user == post.author %}
        <a href="{% url 'edit_post' post.pk %}">Edit</a>
        <a href="{% url 'delete_post' post.pk %}">Delete</a>
    {% endif %}

     <!-- Comments Section -->
     <!-- <div class="comments">
        <h2>Comments</h2>
        {% for comment in comments %}
            <div class="comment">
                <p>{{ comment.text }}</p> 
               
                 <button onclick="upvoteComment({{ comment.pk }})" class="text-green-500">
                    <i class="fas fa-arrow-up"></i>
                </button>
                <span id="comment-upvotes-{{ comment.pk }}">{{ comment.upvotes }}</span>
                <button onclick="downvoteComment({{ comment.pk }})" class="text-red-500">
                    <i class="fas fa-arrow-down"></i>
                </button>
                <span id="comment-downvotes-{{ comment.pk }}">{{ comment.downvotes }}</span>
            </div>
         
        {% endfor %}
    </div> 

    
    <div class="comment-form"> 
        <form method="post" action="{% url 'post_detail' pk=post.pk %}">  
            <form method="post" action="">
       
           {% csrf_token %}
            {{ comment_form.as_p }}
            <button type="submit">Post Comment</button>
        </form>
    </div> -->
    <!-- Comments Section -->
<div class="comments">
    <h2>Comments</h2>
    {% for comment in comments %}
        <div class="comment">
            <p>{{ comment.text }}</p> 
            <!-- Comment Voting -->
            <button onclick="upvoteComment({{ comment.pk }})" class="text-green-500">
                <i class="fas fa-arrow-up"></i>
            </button>
            <span id="comment-upvotes-{{ comment.pk }}">{{ comment.upvotes }}</span>
            <button onclick="downvoteComment({{ comment.pk }})" class="text-red-500">
                <i class="fas fa-arrow-down"></i>
            </button>
            <span id="comment-downvotes-{{ comment.pk }}">{{ comment.downvotes }}</span>
        </div>
    {% endfor %}
</div> 

<!-- Comment Form -->
<form method="post" action="{% url 'post_detail' pk=post.pk %}">
    {% csrf_token %}
    <textarea name="text">{{ comment_form.text.value|default:'' }}</textarea>
    <button type="submit">Post Comment</button>
</form>

    
    
</div>
<!-- Insert photo markup below this comment  -->
{% for photo in post.photo_set.all %}
<img class="responsive-img card-panel" src="{{photo.url}}">
{% empty %}
<div class="card-panel teal-text center-align">No Photos Uploaded</div>
{% endfor %}
<form action="{% url 'add_photo' post.id %}" enctype="multipart/form-data" method="POST" class="card-panel">
    {% csrf_token %}
    <input type="file" name="photo-file">
    <br><br>
    <button type="submit" class="btn">Upload Photo</button>
</form> 




{% endblock %} 


<script>
    function upvoteComment(commentId) {
        $.ajax({
            type: 'POST',
            url: '/upvote-comment/' + commentId + '/',
            data: {
                csrfmiddlewaretoken: csrftoken,  // Ensure CSRF token is available
            },
            success: function(response) {
                $('#comment-upvotes-' + commentId).text(response.upvotes);
            },
            error: function(xhr, status, error) {
                console.log('Error in upvoting comment: ', error);
            }
        });
    }

    function downvoteComment(commentId) {
        $.ajax({
            type: 'POST',
            url: '/downvote-comment/' + commentId + '/',
            data: {
                csrfmiddlewaretoken: csrftoken,  // Ensure CSRF token is available
            },
            success: function(response) {
                $('#comment-downvotes-' + commentId).text(response.downvotes);
            },
            error: function(xhr, status, error) {
                console.log('Error in downvoting comment: ', error);
            }
        });
    }
</script>











{% extends 'base.html' %}

{% block content %}
<a href="{% url 'create_post' %}" class="inline-block">
    <button class="bg-orange-500 text-white font-semibold py-2 px-4 border border-orange-700 rounded shadow">
        Create a Post
    </button>
</a>

{% for post in posts %}
<div class="border border-gray-300 p-4 mt-4 rounded">
    <h2 class="text-xl font-semibold text-gray-800">
        <a href="{% url 'post_detail' post.pk %}">{{ post.title }}</a>
    </h2>
    <p class="text-gray-600">{{ post.content }}</p>

    <!-- Upvote and Downvote Buttons -->
    <button onclick="upvotePost({{ post.pk }})" class="text-blue-300">
        <i class="fas fa-arrow-up"></i>
    </button>
    <span id="post-upvotes-{{ post.pk }}">{{ post.upvotes }}</span>
    <button onclick="downvotePost({{ post.pk }})" class="text-orange-500">
        <i class="fas fa-arrow-down"></i>
    </button>
    <span id="post-downvotes-{{ post.pk }}">{{ post.downvotes }}</span>
</div>
{% endfor %}
{% endblock %}








@login_required
def edit_post(request, post_id):
    post = get_object_or_404(Post, pk=post_id, author=request.user)
    if request.method == 'POST':
        form = PostForm(request.POST, instance=post)
        if form.is_valid():
            form.save()
            return redirect('post_detail', post_id=post.id)
    else:
        form = PostForm(instance=post)
    return render(request, 'edit_post.html', {'form': form})

@login_required
def delete_post(request, post_id):
    post = get_object_or_404(Post, pk=post_id, author=request.user)
    if request.method == 'POST':
        post.delete()
        return redirect('home')












from django.conf import settings
from django.db import models
from django.contrib.auth.models import User

class Subpost(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField()
    upvotes = models.IntegerField(default=0)  # NEW CHANGES!!!
    downvote = models.IntegerField(default=0) #NEW CHANGES !!!
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name
    
class Post(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField(blank=True)
    image = models.ImageField(upload_to='images/', blank=True, null=True)
    video = models.FileField(upload_to='videos/', blank=True, null=True)
    link = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.title
    
class Photo(models.Model):
    url = models.CharField(max_length=200)
    post = models.ForeignKey(Post, on_delete=models.CASCADE)

    def __str__(self):
        return f"Photo for post_id: {self.post_id} @{self.url}"

    # Many-to-many fields for tracking votes
    upvoted_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='upvoted_posts', blank=True)
    downvoted_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='downvoted_posts', blank=True)

    @property
    def upvotes(self):
        return self.upvoted_users.count()

    @property
    def downvotes(self):
        return self.downvoted_users.count()

    def __str__(self):
        return self.title


class Comment(models.Model): #NEW CHANGES
    post = models.ForeignKey(Post, related_name='comments', on_delete=models.CASCADE)
    author = models.CharField(max_length=100)  # or use a ForeignKey to a User model
    text = models.TextField()
    created_date = models.DateTimeField(auto_now_add=True)
    upvotes = models.IntegerField(default=0)
    downvotes = models.IntegerField(default=0)

    def __str__(self):
        return self.text


class Subscription(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    subpost = models.ForeignKey(Subpost, on_delete=models.CASCADE)
    
    def __str__(self):
        return f"{self.user.username} subscribed to {self.subpost.name}"
    
    def promote_to_moderator(self):
        self.is_moderator = True
        self.save()










        class Comment(models.Model): #NEW CHANGES
    post = models.ForeignKey(Post, related_name='comments', on_delete=models.CASCADE)
    author = models.CharField(max_length=100)  # or use a ForeignKey to a User model
    text = models.TextField()
    created_date = models.DateTimeField(auto_now_add=True)
    upvotes = models.IntegerField(default=0)
    downvotes = models.IntegerField(default=0)

    def __str__(self):
        return self.text